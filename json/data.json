{
  "projects": [
    {
      "id": 1,
      "name": "Codeful",
      "description": "A journaling and progress tracking application for web developers!",
      "project_description_html" : "<p>Codeful was developed as a way to give beginner web-developers a better way to track their progress and reflect on their daily studies.<br><br>The app allows users to submit journal entries containing text and code snippets that they can then view, edit, delete or share with friends.</p><br><p>Some other notable features include: </p><br><ul><li>&#x2022 A statistics page - total entries, total hours studied, words typed, languages most frequently referenced.</li><br><li>&#x2022 A public facing user feed, where users can share their journal entries with each other.</li><br><li>&#x2022 Code snippets included in journal entries can be written in over 10 languages and include syntax highlighting!</li><br><li>&#x2022 Dark mode ü¶á</li></ul><br><p>This project was built with my awesome colleagues, Nawal Abdi and Hilora Dewett!",
      "project_tech_html" : "<p>Codeful ws built using:</p><br /><ul><li>&#x2022 Javascript + Node.js</li><br /><li>&#x2022 React + React Router</li><br /><li>&#x2022 Express</li><br /><li>&#x2022 PostgreSQL</li><br /><li>&#x2022 Tailwind/Daisy UI</li><br /><li>&#x2022 Google Charts</li><br /><li>&#x2022 Tiny MCE - text editor</li><br /></ul>",
      "project_challenges_html" : "<p>Building Codeful was a lot of fun but it also came with its challenges, including:</p><br><ul><li>&#x2022 Finding a way to count the total words a user has typed in all of their cumulative journal entries. We ended up using a custom regex expression to capture the word count of each journal entry, and summing the total count across all entries to give us the figure we wanted.</li><br><li>&#x2022 I originally had some trouble finding a way to be able to re-use our journal entry form component for either creating or updating an existing entry. I ended up finding that I could check to see if props were being passed down to the form component or not when mounted, and then either update the existing entry or create a new record in the db when a user saved their entry.</li></ul>",
      "challenges": "This was a very very challenging project",
      "video": "Codeful Video Here! <!-- Link -->",
      "technologies": ["React", "Express", "PostgreSQL", "Tailwind"],
      "github_link": "https://github.com/hdewett/codeful",
      "project_photos": ["/assets/Project-Images/Codeful/codeful-0.png", "/assets/Project-Images/Codeful/codeful-1-final.png", "/assets/Project-Images/Codeful/Codeful-2-final.png", "/assets/Project-Images/Codeful/Codeful-3-final.png", "/assets/Project-Images/Codeful/Codeful-4-final.png", "/assets/Project-Images/Codeful/Codeful-5-final.png"]
    },
    {
      "id": 2,
      "name": "Student Scheduling App",
      "description": "A React application that allows students to easily book, edit, and cancel interviews with their education mentors.",
      "project_description_html" : "<p>My Student Scheduling App is a React application that allows students to easily schedule and manage appointments with their educational instructors. Students have the option to book an appointment during any weekday as long as there is availability.</p><br><p>Some other notable features include:</p><br><ul><li>&#x2022 The ability to create, read, update or delete appointments.</li><br><li>&#x2022 Real-time form validation - users must input their name and select an instructor before a new appointment can be created.</li><br><li>&#x2022 Front-end handling of error states in instances when there are issues communicating with the back-end api.</li></ul>",
      "project_tech_html" : "<p>The Student Scheduling App was built with:</p><br /><ul><li>&#x2022 Javascript + Node.js</li><br /><li>&#x2022 React + Functional Components</li><br /><li>&#x2022 Webpack</li><br /><li>&#x2022 CSS3</li><br /><li>&#x2022 Jest</li><br /><li>&#x2022 Cypress</li><br><li>&#x2022 Storybook</li><br><li>&#x2022 3rd party Express.js api</li></ul>",
      "project_challenges_html" : "<p>Some of the challenges I encountered when developing the Student Scheduling App included: </p><br><ul><li>&#x2022 I found myself re-using a lot of the same data logic and api calls between components, and not following DRY principals. I ended up moving all of the data logic into a custom React hook called useApplicationData.js that I was then able to import into App.js and use when necessary, which helped clean things up quite a bit!</li><br><li>&#x2022 Managing the state of the appointment card which would render a different component based on if the user was creating/viewing/updating/deleting an appointment. I found that creating another custom hook called useVisualMode.js to handle the appointment card state allowed for a nice user experience and would track the ‚Äúhistory‚Äù of the component, so a user could move back and forth between states pretty seamlessly.</li></ul>",
      "technologies": ["React", "Javascript", "Axios", "Jest", "Cypress"],
      "github_link": "https://github.com/Ethansteip/Student-scheduling-app",
      "project_photos": ["/assets/Project-Images/Scheduler/Scheduler-0-final.png", "/assets/Project-Images/Scheduler/Scheduler-1-final.png", "/assets/Project-Images/Scheduler/Scheduler-2-final.png", "/assets/Project-Images/Scheduler/Scheduler-3-final.png", "/assets/Project-Images/Scheduler/Scheduler-4-final.png"]
    },
    {
      "id": 3,
      "name": "Jungle - Ecommerce",
      "description": "Jungle is a plant themed E-commerce web application built with Ruby on Rails, Bootstrap CSS, PostgreSQL, and Stripe.",
      "project_description_html" : "<p>Jungle is a plant themed E-commerce web application built with Ruby on Rails. This was my first time using Rails and the MVC paradigm which I really liked!</p><br><p>The idea of ‚Äúconvention over configuration‚Äù didn‚Äôt make a ton of sense to me at first, but I quickly realized the magic of it once I started building out my models, views and controllers - everything seemed to just work, as long as you stuck to the Rail‚Äôs conventions, which made the developer experience very enjoyable! 10/10 would work with Rails again.</p><br><p>The application covers some of the most common features you would expect from an e-commerce site, including:</p><br><ul><li>&#x2022 Cookie based user authentication and back-end validation.</li><br><li>&#x2022 Password protected admin panel.</li><br><li>&#x2022 Product and product category management.</li><br><li>&#x2022 Checkout powered by Stripe üí≥</li></ul>",
      "project_tech_html" : "<p>Jungle - Ecommerce was built with:</p><br /><ul><li>&#x2022 Ruby on Rails 6.1</li><br /><li>&#x2022 Bootstrap 5</li><br /><li>&#x2022 PostgresSQL 9.x</li><br /><li>&#x2022 Stripe</li><br /><li>&#x2022 Rspec</li><br /><li>&#x2022 Cypress</li><br /><br /></ul>",
      "project_challenges_html" : "<p>Being my first time using Rails, a lot of the challenge came down to going through lots and lots of documentation! A few features I did struggle with included:</p><br><ul><li>&#x2022 User authentication edge cases that came up when I was building out my test cases with Rspec. I ended up having to create a few methods in my User model to strip any leading and trailing whitespace, and downcase emails before they were validated. Also adding in validation for password length.</li><br><li>&#x2022 Testing in general with Rspec required the most amount of effort for me. I tested both my user and product models. I found that using ‚Äúbefore(:each) do‚Äù to set my product or user attributes at the top of each file was a huge time saver and cut down on the amount of repetition in my test files.</li></ul>",
      "technologies": ["Ruby", "Rails", "PostgreSQL", "Bootstrap"],
      "github_link": "https://github.com/Ethansteip/Jungle-ecommerce-store",
      "project_photos": ["/assets/Project-Images/Jungle/Jungle-0-final.png", "/assets/Project-Images/Jungle/Jungle-1-final.png", "/assets/Project-Images/Jungle/Jungle-2-final.png", "/assets/Project-Images/Jungle/Jungle-3-final.png", "/assets/Project-Images/Jungle/Jungle-4-final.png"]
    },
    {
      "id": 4,
      "name": "Buy & Sell Marketplace",
      "description": "A communal marketplace application that allows users to post, buy, favourite and sell items online",
      "project_description_html" : "<p>Our Buy and Sell app is a communal marketplace that allows users to post items for sale, similar to Kajiji or Facebook Marketplace. The app features both a user facing side and an admin side. Users are allowed to browse and favourite products, while admins can upload new products to the app.</p><br><p>Some other notable features include:</p><br><ul><li>&#x2022 Internal app messaging between a user and admin.</li><br><li>&#x2022 Ability for admins to upload new products, mark items as sold, or remove items from the app.</li><br><li>&#x2022 Users can filter items by price and favourite items to check on them later.</li></ul><br><p>This project was built alongside my awesome colleague, Akashdeep Sekhon!</p>",
      "project_tech_html" : "<p>Our Buy & Sell Application was built with: </p><br><ul><li>&#x2022 Javascript +  Node.js</li><br><li>&#x2022 Express.js</li><br><li>&#x2022 postgreSQL</li><br><li>&#x2022 Embedded Javascript Templates (dynamic HTML)</li><br><li>&#x2022 CSS3</li></ul>",
      "project_challenges_html" : "<p>Some of the challenges we encountered while developing our Buy & Sell market place included:</p><br><ul><li>&#x2022 Setting up filters on our featured products page to sort items by price. Since we built the app using a RESTful api, we opted to create two routes for the filters (/highest, /lowest) that would retrieve the product information in the correct order from the db. The GET request to each of these routes were requested when the user toggled a drop down-menu item, and the returned values filled out the product page template, which ended up working well for our application!</li></ul>",
      "technologies": ["Javascript", "Node", "PostgreSQL", "Express"],
      "github_link": "https://github.com/Ethansteip/Buy-And-Sell-Marketplace",
      "project_photos": ["/assets/Project-Images/Marketplace/Marketplace-0-final.png", "/assets/Project-Images/Marketplace/Marketplace-1-final.png", "/assets/Project-Images/Marketplace/Marketplace-2-final.png", "/assets/Project-Images/Marketplace/Marketplace-3-final.png", "/assets/Project-Images/Marketplace/Marketplace-4-final.png"]
    },
    {
      "id": 5,
      "name": "TinyApp",
      "description": "A full stack web app built with Node and Express that allows users to shorten long URLs.",
      "project_description_html" : "<p>TinyApp was built to give you the power to keep your URLs short and succinct. This tool is perfect for transforming long and difficult to read URLs down to a 6 digit, alphanumeric string, allowing you to embed them in your own projects, blogs or tweets!</p><br><p>Some other notable features of Tiny App include:</p><br><ul><li>&#x2022 User auth and password hashing</li><br><li>&#x2022 Custom Algorithm to build short URL ids.</li><br><li>&#x2022 Ability to create, view, update and delete your shortened URLs</li></ul>",
      "project_tech_html" : "<p>TinyApp was built with:</p><br><ul><li>&#x2022 Node.js</li><br><li>&#x2022 Express</li><br /><li>&#x2022 Express - Cookie Session (for user auth.)</li><br /><li>&#x2022 Bcrypt Password Hashing</li><br /><li>&#x2022 Embedded Javascript Templates</li><br /><li>&#x2022 Bootstrap CSS</li></ul>",
      "project_challenges_html" : "<p>Some of the challenges I encountered when developing TinyApp included: </p><br><ul><li>&#x2022 Handling some of the different edge cases of validating user actions like deleting or editing a url. A user should only be able to delete or update a url if they were logged in, and if the url belonged to their account. I ended up building some helper functions that I used inside my delete and update routes to help validate these actions.</li><br><li>&#x2022 Coming up with a function that would help me generate a 6 digit alphanumeric string to use as the shortened URL. I ended up building a function that used Math.random() to pick each of the 6 characters from a string of upper/lower case letters and the numbers 0-9. This was done inside a for loop that would ultimately spit out a 6 digit code.</li></ul>",
      "technologies": ["Javascript", "Node", "Express"],
      "github_link": "https://github.com/Ethansteip/tinnyapp",
      "project_photos": ["/assets/Project-Images/Tiny-App/Tiny-App-0.png", "/assets/Project-Images/Tiny-App/Tiny-App-1.png"]
    },
    {
      "id": 6,
      "name": "Tweeter",
      "description": "A single page and minimal Twitter clone",
      "project_description_html" : "<p>Introducing Tweeter, a single page application that allows users to post their thoughts and feelings to an online forum and is guaranteed to come without the ramblings of Mr.Musk! Tweeter showcases a responsive layout so it'll look good on all your devices and leverages Ajax and jQuery for a seamless user experience.</p><br><p>Some other notable features include:</p><br><ul><li>&#x2022 140 max character count on tweets.</li><br><li>&#x2022 Character counter updates in real-time as you type.</li><br><li>&#x2022 Character count validation. Will let a user know if they are using too many characters.</li></ul>",
      "project_tech_html" : "<p>Tweeter was built with:</p><br><ul><li>&#x2022 Javascript + Node.js</li><br><li>&#x2022 Express.js</li><br><li>&#x2022 jQuery</li><br><li>&#x2022 Ajax</li><br><li>&#x2022 CSS3</li><br><li>&#x2022 Body-parser</li><br><li>&#x2022 Chance</li></ul>",
      "project_challenges_html" : "<p>Some of the challenges I encountered when developing Tweeter included:</p><br><ul><li>&#x2022 Calculating the tweet character count threshold to ensure users didn‚Äôt surpass 140 characters. I ended up using jQuery's built-in .val() method to capture the state of the text input, then used the length of the text-input value to update the counter and perform any validation if needed.</li></ul>",
      "technologies": ["Javascript", "jquery", "CSS"],
      "github_link": "https://github.com/Ethansteip/tweeter",
      "project_photos": ["/assets/Project-Images/Tweeter/Tweeter-0.png", "/assets/Project-Images/Tweeter/Tweeter-1.png", "/assets/Project-Images/Tweeter/Tweeter-2.png"]
    }
  ]
}