{
  "projects": [
    {
      "id": 1,
      "name": "Codeful",
      "description": "A journaling and progress tracking application for web developers!",
      "project_description_html" : "<p>Codeful was developed as a way to give beginner web-developers a better way to track their progress and reflect on their daily studies.<br><br>The app allows users to submit journal entries containing text and code snippets that they can then view, edit, delete or share with friends.</p><br><p>Some other notable features include: </p><br><ul><li>&#x2022 A statistics page - total entries, total hours studied, words typed, languages most frequently referenced.</li><br><li>&#x2022 A public facing user feed, where users can share their journal entries with each other.</li><br><li>&#x2022 Code snippets included in journal entries can be written in over 10 languages and include syntax highlighting!</li><br><li>&#x2022 Dark mode ü¶á</li></ul><br><p>This project was built with my awesome colleagues, Nawal Abdi and Hilora Dewett!",
      "project_tech_html" : "<p>Codeful ws built using:</p><br /><ul><li>&#x2022 Javascript + Node.js</li><br /><li>&#x2022 React + React Router</li><br /><li>&#x2022 Express</li><br /><li>&#x2022 PostgreSQL</li><br /><li>&#x2022 Tailwind/Daisy UI</li><br /><li>&#x2022 Google Charts</li><br /><li>&#x2022 Tiny MCE - text editor</li><br /></ul>",
      "project_challenges_html" : "<p>Building Codeful was a lot of fun but it also came with its challenges, including:</p><br><ul><li>&#x2022 Finding a way to count the total words a user has typed in all of their cumulative journal entries. We ended up using a custom regex expression to capture the word count of each journal entry, and summing the total count across all entries to give us the figure we wanted.</li><br><li>&#x2022 I originally had some trouble finding a way to be able to re-use our journal entry form component for either creating or updating an existing entry. I ended up finding that I could check to see if props were being passed down to the form component or not when mounted, and then either update the existing entry or create a new record in the db when a user saved their entry.</li></ul>",
      "challenges": "This was a very very challenging project",
      "video": "Codeful Video Here! <!-- Link -->",
      "technologies": ["React", "Express", "PostgreSQL", "Tailwind"],
      "github_link": "https://github.com/hdewett/codeful",
      "project_photos": ["/assets/Project-Images/Codeful/codeful-0.png", "/assets/Project-Images/Codeful/codeful-1.png", "/assets/Project-Images/Codeful/codeful-2.png", "/assets/Project-Images/Codeful/codeful-4.png"]
    },
    {
      "id": 2,
      "name": "Student Scheduling App",
      "description": "A React application that allows students to easily book, edit, and cancel interviews with their education mentors.",
      "project_description_html" : "<p>My Student Scheduling App is a React application that allows students to easily schedule and manage appointments with their educational instructors. Students have the option to book an appointment during any weekday as long as there is availability.</p><br><p>Some other notable features include:</p><br><ul><li>&#x2022 The ability to create, read, update or delete appointments.</li><br><li>&#x2022 Real-time form validation - users must input their name and select an instructor before a new appointment can be created.</li><br><li>&#x2022 Front-end handling of error states in instances when there are issues communicating with the back-end api.</li></ul>",
      "project_tech_html" : "<p>The Student Scheduling App was built with:</p><br /><ul><li>&#x2022 Javascript + Node.js</li><br /><li>&#x2022 React + Functional Components</li><br /><li>&#x2022 Webpack</li><br /><li>&#x2022 CSS3</li><br /><li>&#x2022 Jest</li><br /><li>&#x2022 Cypress</li><br><li>&#x2022 Storybook</li><br><li>&#x2022 3rd party Express.js api</li></ul>",
      "project_challenges_html" : "<p>Some of the challenges I encountered when developing the Student Scheduling App included: </p><br><ul><li>&#x2022 I found myself re-using a lot of the same data logic and api calls between components, and not following DRY principals. I ended up moving all of the data logic into a custom React hook called useApplicationData.js that I was then able to import into App.js and use when necessary, which helped clean things up quite a bit!</li><br><li>&#x2022 Managing the state of the appointment card which would render a different component based on if the user was creating/viewing/updating/deleting an appointment. I found that creating another custom hook called useVisualMode.js to handle the appointment card state allowed for a nice user experience and would track the ‚Äúhistory‚Äù of the component, so a user could move back and forth between states pretty seamlessly.</li></ul>",
      "technologies": ["React", "Javascript", "Axios", "Jest", "Cypress"],
      "github_link": "https://github.com/Ethansteip/Student-scheduling-app",
      "project_photos": ["/assets/Project-Images/Scheduler/scheduler-0.png", "/assets/Project-Images/Scheduler/scheduler-1.png", "/assets/Project-Images/Scheduler/scheduler-2.png"]
    },
    {
      "id": 3,
      "name": "Jungle - Ecommerce",
      "description": "Jungle is a plant themed E-commerce web application built with Ruby on Rails, Bootstrap CSS, PostgreSQL, and Stripe.",
      "project_description_html" : "<p>Jungle is a plant themed E-commerce web application built with Ruby on Rails. This was my first time using Rails and the MVC paradigm which I really liked!</p><br><p>The idea of ‚Äúconvention over configuration‚Äù didn‚Äôt make a ton of sense to me at first, but I quickly realized the magic of it once I started building out my models, views and controllers - everything seemed to just work, as long as you stuck to the Rail‚Äôs conventions, which made the developer experience very enjoyable! 10/10 would work with Rails again.</p><br><p>The application covers some of the most common features you would expect from an e-commerce site, including:</p><br><ul><li>&#x2022 Cookie based user authentication and back-end validation.</li><br><li>&#x2022 Password protected admin panel.</li><br><li>&#x2022 Product and product category management.</li><br><li>&#x2022 Checkout powered by Stripe üí≥</li></ul>",
      "project_tech_html" : "<p>Jungle - Ecommerce was built with:</p><br /><ul><li>&#x2022 Ruby on Rails 6.1</li><br /><li>&#x2022 Bootstrap 5</li><br /><li>&#x2022 PostgresSQL 9.x</li><br /><li>&#x2022 Stripe</li><br /><li>&#x2022 Rspec</li><br /><li>&#x2022 Cypress</li><br /><br /></ul>",
      "project_challenges_html" : "<p>Being my first time using Rails, a lot of the challenge came down to going through lots and lots of documentation! A few features I did struggle with included:</p><br><ul><li>&#x2022 User authentication edge cases that came up when I was building out my test cases with Rspec . I ended up having to create a few methods in my User model to strip any leading and trailing whitespace, and downcase emails before they were validated. Also adding in validation for password length.</li><br><li>&#x2022 Testing in general with Rspec required the most amount of effort for me. I tested both my user and product models. I found that using ‚Äúbefore(:each) do‚Äù to set my product or user attributes at the top of each file was a huge time saver and cut down on the amount of repetition in my test files.</li></ul>",
      "technologies": ["Ruby", "Rails", "PostgreSQL", "Bootstrap"],
      "github_link": "https://github.com/Ethansteip/Jungle-ecommerce-store",
      "project_photos": ["/assets/Project-Images/Jungle/Jungle-1.png", "/assets/Project-Images/Jungle/Jungle-0.png", "/assets/Project-Images/Jungle/Jungle-2.png", "/assets/Project-Images/Jungle/Jungle-3.png"]
    },
    {
      "id": 4,
      "name": "Buy & Sell Marketplace",
      "description": "A communal marketplace application that allows users to post, buy, favourite and sell items online",
      "technologies": ["Javascript", "Node", "PostgreSQL", "Express"],
      "github_link": "https://github.com/Ethansteip/Buy-And-Sell-Marketplace",
      "project_photos": []
    },
    {
      "id": 5,
      "name": "TinyApp",
      "description": "A full stack web app built with Node and Express that allows users to shorten long URLs.",
      "project_description_html" : "<p>TinyApp was built to give you the power to keep your URLs short and succint. This tool is perfect for transforming long and difficult to read URLs down to a 6 digit, alphanumeric string, allowing you to embedd them in your own prjects, blogs or tweets!</p>",
      "project_tech_html" : "<p>TinyApp was built with:</p><br /><ul><li>&#x2022 Node.js</li><br /><li>&#x2022 Express</li><br /><li>&#x2022 Express - Cookie Session (for user auth.)</li><br /><li>&#x2022 Bcrypt Password Hashing</li><br /><li>&#x2022 Embedded Javascript Templates</li><br /><li>&#x2022 Bootstrap CSS</li></ul>",
      "project_challenges_html" : "",
      "technologies": ["Javascript", "Node", "Express"],
      "github_link": "https://github.com/Ethansteip/tinnyapp",
      "project_photos": ["/assets/Project-Images/Tiny-App/Tiny-App-0.png", "/assets/Project-Images/Tiny-App/Tiny-App-1.png"]
    },
    {
      "id": 6,
      "name": "Tweeter",
      "description": "A single page and minimal Twitter clone",
      "technologies": ["Javascript", "jquery", "CSS"],
      "github_link": "https://github.com/Ethansteip/tweeter",
      "project_photos": ["/assets/Project-Images/Tweeter/Tweeter-0.png", "/assets/Project-Images/Tweeter/Tweeter-1.png", "/assets/Project-Images/Tweeter/Tweeter-2.png"]
    }
  ]
}